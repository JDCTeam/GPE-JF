#!/bin/bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  BUILD_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$BUILD_DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
BUILD_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# BUILD
VERSION=$(date +%Y%m%d)
TIMESTAMP=$(date)
UTC=$(date +%s)
API_NUM=5.1
BRANCH=GED-"$API_NUM"

# TOOLS
ROM_DIR="$BUILD_DIR"/rom
ROMNAME=GPE-JF-"$API_NUM"
FILE="$ROMNAME"-${VERSION}.zip
DIST="$BUILD_DIR"/dist/"$VERSION"
TOOLS="$BUILD_DIR"/tools
APKTOOL="$TOOLS"/apktool

# ROM
SYSTEM_DIR="$ROM_DIR"/system
FRAMEWORK_DIR="$SYSTEM_DIR"/framework
OVERLAY_DIR="$ROM_DIR"/overlay
OVERLAY_SYSTEM="$ROM_DIR"/overlay/system/system
OVERLAY_GAPPS="$ROM_DIR"/overlay/gapps

# KERNEL
KERNEL="$BUILD_DIR"/kernel
KERNEL_DIST="$KERNEL"/dist

# MODS
MODS_DIR="$BUILD_DIR"/mods

# ADDONS
ADDONS_DIR="$BUILD_DIR"/addons


echo "$BUILD_DIR"

buildROM() {

	if [ ! -e "$KERNEL_DIST"/boot.img ];then
		echo "Kernel not built, you cannot continue with the build"
		exit 255
	fi

	if [ ! -e "$DIST" ];then
		mkdir -p "$DIST"
		mkdir -p "$DIST"/addons
	fi

	rm -rf "$DIST"/"$ROMNAME"-*.zip

	cp "$BUILD_DIR"/Changelog.md "$OVERLAY_SYSTEM"/etc/CHANGELOG.txt

	ROM_SYSTEM_COUNT=$(find "$SYSTEM_DIR" -type f | wc -l)
	ROM_OVERLAY_COUNT=$(find "$OVERLAY_DIR" -type f | wc -l)

	FILE_COUNT=$(expr "$ROM_SYSTEM_COUNT" + "$ROM_OVERLAY_COUNT")

	sed -i "s/.*show_progress.*/	show_progress(1.0, $FILE_COUNT);/g" "$ROM_DIR"/META-INF/com/google/android/updater-script

	sed -i "s/.*ro.build.version.incremental.*/ro.build.version.incremental=$VERSION/g" "$OVERLAY_SYSTEM"/build.prop
	sed -i "s/.*ro.ota.version.*/ro.ota.version=$VERSION/g" "$OVERLAY_SYSTEM"/build.prop
	sed -i "s/.*ro.build.date=.*/ro.build.date=$TIMESTAMP/g" "$OVERLAY_SYSTEM"/build.prop
	sed -i "s/.*ro.build.date.utc.*/ro.build.date.utc=$UTC/g" "$OVERLAY_SYSTEM"/build.prop

	7za a -mx9 -xr@"$TOOLS"/exclusion.txt "$DIST"/"$FILE" "$ROM_DIR"/META-INF "$ROM_DIR"/install "$SYSTEM_DIR" "$KERNEL_DIST"/boot.img "$KERNEL_DIST"/system

	if [ -e "$OVERLAY_DIR" ];then
		for d in "$OVERLAY_DIR"/* ;do
			7za u -mx9 -up1q1r2x2y2z1w2 -xr@"$TOOLS"/exclusion.txt "$DIST"/"$FILE" "$d"/*
		done
	fi

	md5sum "$DIST"/"$FILE" > "$DIST"/"$FILE".md5
}

buildApps() {
	cd "$MODS_DIR"

	if [ -d framework ]; then
		cd framework
		for f in * ; do
			"$APKTOOL" b -c "$f"
			cp "$f"/dist/"$f" "$FRAMEWORK_DIR"/"$f"
			rm -rf "$f"/dist "$f"/build
		done
		cd ..
	fi

	"$APKTOOL" if "$FRAMEWORK_DIR"/framework-res.apk

	if [ -d app ]; then
		cd app
		for f in * ; do
			"$APKTOOL" b -c "$f"
			if [ ! -d "$SYSTEM_DIR"/app/"${f%%.*}" ]; then
				mkdir -p "$SYSTEM_DIR"/app/"${f%%.*}"
			fi
			cp "$f"/dist/"$f" "$SYSTEM_DIR"/app/"${f%%.*}"/"$f"
			rm -rf "$f"/dist "$f"/build
		done
		cd ..
	fi

	if [ -d priv-app ]; then
		cd priv-app
		for f in * ; do
			"$APKTOOL" b -c "$f"
			if [ ! -d "$SYSTEM_DIR"/priv-app/"${f%%.*}" ]; then
				mkdir -p "$SYSTEM_DIR"/priv-app/"${f%%.*}"
			fi
			cp "$f"/dist/"$f" "$SYSTEM_DIR"/priv-app/"${f%%.*}"/"$f"
			rm -rf "$f"/dist "$f"/build
		done
		cd ..
	fi
}

buildAddons() {
	cd "$ADDONS_DIR"
	for d in */ ; do
		if [ -e "$d" ];then
			cd "$d"
			NAME=$(cat zipname.txt)
			7za a -r -mx9 -xr@"$TOOLS"/exclusion.txt "$DIST"/addons/"$ROMNAME"_$NAME.zip *
			cd ..
		else
			echo "No Addons to zip"
		fi
	done
	cd ..
}

buildKernel() {
	cd "$KERNEL"
	make clean
	make mrproper
	./build_kernel.sh

	if [ ! -e "$KERNEL"/arch/arm/boot/zImage ];then
		echo "Kernel failed to build"
		exit 0
	fi
}

buildGapps() {
	OPENGAPPS_ARCH=arm
	OPENGAPPS_VARIANT=stock
	OPENGAPPS_API=22
	OPENGAPPS_ZIP=open_gapps-"$OPENGAPPS_ARCH"-"$API_NUM"-"$OPENGAPPS_VARIANT"-"$VERSION".zip
	OPENGAPPS_INSTALL="$BUILD_DIR"/rom/install/opengapps
	OPENGAPPS_OUT="$BUILD_DIR"/opengapps/out

	if [ ! -e "$OPENGAPPS_OUT"/"$OPENGAPPS_ZIP" ];then
		./"$BUILD_DIR"/opengapps/download_sources.sh
		make "$OPENGAPPS_ARCH"-"$OPEN_GAPPS_API"-"$OPENGAPPS_VARIANT"
	fi

	if [ ! -e "$OPEN_GAPPS_INSTALL" ];then
		mkdir -p "$OPENGAPPS_INSTALL"
	fi
	
	echo "Copying Gapps to Install folder"
	cp "$OPENGAPPS_OUT"/"$OPENGAPPS_ZIP" "$OPENGAPPS_INSTALL"/opengapps.zip
}

checkForUpdates() {
	echo "Checking for updates"
	git pull origin "$BRANCH"
	git pull --recurse-submodules
	git submodule update --recursive
}

start() {
	
	echo "Select to either BUILD the ROM, or just the modified apps/jars"
	select CHOICE in "Build ROM, GApps, Kernel and Files" "Build ROM" "Build Kernel" "Build Modded Files" "Build Addons" "Build GApps" "Check for Updates" "Exit"; do
	    case "$CHOICE" in
	        "Build ROM, GApps, Kernel and Files" ) buildKernel; buildApps; buildGapps; buildROM; start; break;;
	        "Build ROM" ) buildROM; start; break;;
			"Build Kernel" ) buildKernel; start; break;;
			"Build Modded Files" ) buildApps; start; break;;
			"Build Addons" ) buildAddons; start; break;;
			"Build GApps" ) buildGapps; start; break;;
			"Check for Updates" ) checkForUpdates; start; break;;
			"Exit" ) exit 0; break;;
	    esac
	done
}

start

exit 0
